/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package assign3;

import assign3.HighScoreTable;
import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JMenuItem; 

/**
 *
 * @author lenovo
 */
public class Labyrinthgui extends javax.swing.JFrame {
public String playerName;
    /**
     * Creates new form Labyrinthgui
     */
    /*
    int[][] maze = {
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}, // 1 represents walls, 0 represents paths
    {1, 0, 0, 0, 1, 0, 1, 0, 0, 1},
    {1, 0, 1, 0, 1, 0, 1, 0, 1, 1},
    // ... more rows defining your maze
    {1, 1, 1, 1, 1, 1, 1, 1, 1, 1}
};
    */
//int[][] maze=MazeGenerator.generateMaze();

  private Model gameModel ;

    public Labyrinthgui(String name) {
       // PlayerJFrame pjInstance = new PlayerJFrame();
        this.playerName = name;
        initComponents();
          addMenuItem();
        gameModel = new Model(name);
         jPanel2.setPreferredSize(new Dimension(800, 600));
        // Adding gameModel to jPanel2
        jPanel2.setLayout(new BorderLayout());
        jPanel2.add(gameModel, BorderLayout.CENTER);

        gameModel.setFocusable(true);
        gameModel.requestFocusInWindow();

        /// MazePanel mazePanel = new MazePanel(maze); // Use the maze array defined earlier
        ///  getContentPane().add(mazePanel, BorderLayout.CENTER);
       // add(mazePanel);
        pack(); 
        setVisible(true);
    }
 private void addMenuItem() {
        JMenuItem restartMenuItem = new JMenuItem("Restart Game");
        restartMenuItem.addActionListener(e -> restartGame());
        jMenu1.add(restartMenuItem);
        
        JMenuItem highScoresMenuItem = new JMenuItem("Highscores");
        highScoresMenuItem.addActionListener(e -> showHighScores());
        jMenu1.add(highScoresMenuItem);
    
    }
 

 private void restartGame() {
        // Implement the restart logic here
        gameModel.finished= false;
        gameModel.StartGame();
        gameModel.repaint();
    }
     private void showHighScores() {
        // Method to display highscores
        HighScoreTable highScoresFrame = new  HighScoreTable();
         highScoresFrame.setVisible(true);
        // Replace `HighScoresFrame` with the actual class you use for displaying highscores
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().add(jPanel2, java.awt.BorderLayout.CENTER);

        jMenu1.setText("Commands");
        jMenu1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenu1ActionPerformed(evt);
            }
        });
        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenu1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenu1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenu1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Labyrinthgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Labyrinthgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Labyrinthgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Labyrinthgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Labyrinthgui("DefaultPlayer").setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    // End of variables declaration//GEN-END:variables
}
